// ================= Product Service (State Management) =================
import { Component, Injectable, OnInit } from '@angular/core';
import { Routes, Router, ActivatedRoute, RouterOutlet } from '@angular/router';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { BehaviorSubject, Observable } from 'rxjs';
import { map } from 'rxjs/operators';


// ================= Product Interface =================
export interface Product {
  id: number;
  name: string;
  price: number;
  image: string;
  description: string;
}

// ================= Product Service =================
@Injectable({
  providedIn: 'root'
})
export class ProductService {
  private productsSubject = new BehaviorSubject<Product[]>([
    {
      id: 1,
      name: 'Dell XPS 13 Laptop',
      price: 1299,
      image: 'https://images.unsplash.com/photo-1496181133206-80ce9b88a853?w=400',
      description: 'High-performance laptop with Intel Core i7 processor and 16GB RAM'
    },
    {
      id: 2,
      name: 'iPhone 15 Pro',
      price: 999,
      image: 'https://images.unsplash.com/photo-1592750475338-74b7b21085ab?w=400',
      description: 'Latest iPhone release with advanced camera and exceptional performance'
    },
    {
      id: 3,
      name: 'AirPods Pro',
      price: 249,
      image: 'https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=400',
      description: 'Wireless earbuds with active noise cancellation'
    }
  ]);

  products = this.productsSubject.asObservable();

  getProducts(): Observable<Product[]> {
    return this.products;
  }

  getProduct(id: number): Product | undefined {
    return this.productsSubject.value.find(p => p.id === id);
  }

  addProduct(product: Omit<Product, 'id'>): void {
    const products = this.productsSubject.value;
    const newProduct: Product = {
      product,
      id: Math.max(0, ...products.map(p => p.id)) + 1
    };
    this.productsSubject.next([...products, newProduct]);
  }

  updateProduct(id: number, product: Omit<Product, 'id'>): void {
    const products = this.productsSubject.value;
    const index = products.findIndex(p => p.id === id);
    if (index !== -1) {
      products[index] = { product, id };
      this.productsSubject.next([...products]);
    }
  }

  deleteProduct(id: number): void {
    const products = this.productsSubject.value.filter(p => p.id !== id);
    this.productsSubject.next(products);
  }
}

// ================= Product List Component =================
@Component({
  selector: 'app-product-list',
  standalone: true,
  imports: [CommonModule, FormsModule],
  template: `
    <div class="container">
      <div class="header">
        <h1>Product Management</h1>
        <div class="header-actions">
          <div class="search-box">
            <input
              type="text"
              [(ngModel)]="searchTerm"
              (ngModelChange)="updateFilteredProducts()"
              placeholder="Search products..."
              class="search-input"
            >
          </div>
          <button class="btn-primary" (click)="navigateToAddProduct()">
             Add Product
          </button>
        </div>
      </div>

      <div class="products-grid">
        <div
          *ngFor="let product of filteredProducts$ | async"
          class="product-card"
          (click)="navigateToProductDetails(product.id)"
        >
          <div class="product-image">
            <img [src]="product.image || 'https://via.placeholder.com/200'" [alt]="product.name">
            <div class="product-price"> {{ product.price | currency }} </div>
          </div>
          <div class="product-info">
            <h3>{{product.name}}</h3>
            <p>{{product.description}}</p>
          </div>
        </div>
      </div>
    </div>
  `,
})
export class ProductListComponent implements OnInit {
  searchTerm: string = '';
  products: Observable<Product[]>;
  filteredProducts: Observable<Product[]>;

  constructor(
    private productService: ProductService,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.products = this.productService.getProducts();
    this.updateFilteredProducts();
  }

  updateFilteredProducts(): void {
    this.filteredProducts = this.products.pipe(
      map(products =>
        products.filter(product =>
          product.name.toLowerCase().includes(this.searchTerm.toLowerCase()) ||
          product.description.toLowerCase().includes(this.searchTerm.toLowerCase())
        )
      )
    );
  }

  navigateToProductDetails(id: number): void {
    this.router.navigate(['/products', id]);
  }

  navigateToAddProduct(): void {
    this.router.navigate(['/products/new']);
  }
}

// ================= Product Detail Component =================
@Component({
  selector: 'app-product-detail',
  standalone: true,
  imports: [CommonModule],
  template: `
    <div class="container" *ngIf="product">
      <div class="product-details">
        <div class="details-header">
          <button class="btn-back" (click)="navigateToProductsList()"> Back</button>
          <div class="details-actions">
            <button class="btn-edit" (click)="navigateToEditProduct()">Edit</button>
            <button class="btn-delete" (click)="deleteProduct()">Delete</button>
          </div>
        </div>

        <div class="details-content">
          <div class="details-image">
            <img [src]="product.image || 'https://via.placeholder.com/400'" [alt]="product.name">
          </div>
          <div class="details-info">
            <h2>{{product.name}}</h2>
            <div class="price-tag"> {{ product.price | currency }} </div>
            <div class="description">
              <h4>Description</h4>
              <p>{{product.description || 'No description available'}}</p>
            </div>
            <div class="product-meta">
              <div class="meta-item">
                <span class="label">Product ID:</span>
                <span class="value">{{product.id}}</span>
              </div>
              <div class="meta-item">
                <span class="label">Status:</span>
                <span class="value status-available">Available</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  `,
})
export class ProductDetailComponent implements OnInit {
  product: Product | undefined;

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private productService: ProductService
  ) {}

  ngOnInit(): void {
    const id = Number(this.route.snapshot.params['id']);
    this.product = this.productService.getProduct(id);

    if (!this.product) {
      this.router.navigate(['/products']);
    }
  }

  navigateToProductsList(): void {
    this.router.navigate(['/products']);
  }

  navigateToEditProduct(): void {
    if (this.product) {
      this.router.navigate(['/products', this.product.id, 'edit']);
    }
  }

  deleteProduct(): void {
    if (this.product && confirm('Are you sure you want to delete this product?')) {
      this.productService.deleteProduct(this.product.id);
      this.router.navigate(['/products']);
    }
  }
}

// ================= Product Form Component =================
@Component({
  selector: 'app-product-form',
  standalone: true,
  imports: [CommonModule, FormsModule],
  template: `
    <div class="container">
      <div class="product-form">
        <div class="form-header">
          <button class="btn-back" (click)="navigateToProductsList()"> Back</button>
          <h2>{{isEditing ? 'Edit Product' : 'Add New Product'}}</h2>
        </div>

        <div class="form-content">
          <div class="form-group">
            <label>Product Name </label>
            <input
              type="text"
              [(ngModel)]="formData.name"
              placeholder="Enter product name"
              class="form-input"
            >
          </div>

          <div class="form-group">
            <label>Price </label>
            <input
              type="number"
              [(ngModel)]="formData.price"
              placeholder="Enter product price"
              class="form-input"
            >
          </div>

          <div class="form-group">
            <label>Image URL</label>
            <input
              type="url"
              [(ngModel)]="formData.image"
              placeholder="Enter product image URL"
              class="form-input"
            >
            <div *ngIf="formData.image" class="image-preview">
              <img [src]="formData.image" alt="Image Preview">
            </div>
          </div>

          <div class="form-group">
            <label>Description</label>
            <textarea
              [(ngModel)]="formData.description"
              placeholder="Enter product description"
              class="form-textarea"
              rows="4"
            ></textarea>
          </div>

          <div class="form-actions">
            <button class="btn-primary" (click)="saveProduct()">
              {{isEditing ? 'Save Changes' : 'Add Product'}}
            </button>
            <button class="btn-secondary" (click)="navigateToProductsList()">
              Cancel
            </button>
          </div>
        </div>
      </div>
    </div>
  `,
})
export class ProductFormComponent implements OnInit {
  isEditing = false;
  productId: number | null = null;

  formData: Omit<Product, 'id'> = {
    name: '',
    price: 0,
    image: '',
    description: ''
  };

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private productService: ProductService
  ) {}

  ngOnInit(): void {
    const id = this.route.snapshot.params['id'];

    if (id && id !== 'new') {
      this.isEditing = true;
      this.productId = Number(id);
      const product = this.productService.getProduct(this.productId);

      if (product) {
        this.formData = { product };
      } else {
        this.router.navigate(['/products']);
      }
    }
  }

  saveProduct(): void {
    if (!this.formData.name || !this.formData.price) {
      alert('Please fill in all required fields');
      return;
    }

    if (this.isEditing && this.productId) {
      this.productService.updateProduct(this.productId, this.formData);
    } else {
      this.productService.addProduct(this.formData);
    }

    this.router.navigate(['/products']);
  }

  navigateToProductsList(): void {
    this.router.navigate(['/products']);
  }
}

// ================= Routing Configuration =================
export const routes: Routes = [
  { path: '', redirectTo: '/products', pathMatch: 'full' },
  { path: 'products', component: ProductListComponent },
  { path: 'products/new', component: ProductFormComponent },
  { path: 'products/:id', component: ProductDetailComponent },
  { path: 'products/:id/edit', component: ProductFormComponent },
  { path: '**', redirectTo: '/products' }
];

// ================= App Component =================
@Component({
  selector: 'app-root',
  template: `
    <router-outlet></router-outlet>
  `,
  standalone: true,
  imports: [RouterOutlet],
})
export class AppComponent {
  title = 'products-app';
}